import { app, BrowserWindow, ipcMain } from 'electron';
import { MCPClientManager, logger } from './client';
import type { MCPServerConfig, ServerInfo, ToolExecutionResult } from './client/types';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Initialize MCP Client Manager
const mcpManager = new MCPClientManager();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  logger.info('Main window created');
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Cleanup on quit
app.on('before-quit', async () => {
  logger.info('Application quitting, cleaning up MCP connections...');
  await mcpManager.disconnectAll();
});

// ========================================
// IPC Handlers for MCP Client Operations
// ========================================

/**
 * Add and connect to a new MCP server
 */
ipcMain.handle('mcp:addServer', async (_, config: MCPServerConfig): Promise<{ success: boolean; error?: string }> => {
  try {
    logger.info('Adding MCP server:', config.name);
    await mcpManager.addServer(config);
    return { success: true };
  } catch (error) {
    logger.error('Failed to add MCP server:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
});

/**
 * Remove a server connection
 */
ipcMain.handle('mcp:removeServer', async (_, serverId: string): Promise<{ success: boolean; error?: string }> => {
  try {
    logger.info('Removing MCP server:', serverId);
    await mcpManager.removeServer(serverId);
    return { success: true };
  } catch (error) {
    logger.error('Failed to remove MCP server:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    };
  }
});

/**
 * Get information about a specific server
 */
ipcMain.handle('mcp:getServerInfo', (_, serverId: string): ServerInfo | undefined => {
  return mcpManager.getServerInfo(serverId);
});

/**
 * Get information about all servers
 */
ipcMain.handle('mcp:getAllServers', (): ServerInfo[] => {
  return mcpManager.getAllServers();
});

/**
 * Get all available tools from all connected servers
 */
ipcMain.handle('mcp:getAllTools', () => {
  return mcpManager.getAllTools();
});

/**
 * Execute a tool on a specific server
 */
ipcMain.handle(
  'mcp:executeTool',
  async (_, serverId: string, toolName: string, args?: Record<string, unknown>): Promise<ToolExecutionResult> => {
    logger.info(`Executing tool ${toolName} on server ${serverId}`, args);
    return mcpManager.executeTool(serverId, toolName, args);
  }
);

/**
 * Find which server has a specific tool
 */
ipcMain.handle('mcp:findToolServer', (_, toolName: string): string | undefined => {
  return mcpManager.findToolServer(toolName);
});

/**
 * Get the count of connected servers
 */
ipcMain.handle('mcp:getConnectedCount', (): number => {
  return mcpManager.getConnectedCount();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
